#include<iostream> 
using namespace std; 
  
// A dynamic programming based function to find nth 
// Catalan number 
unsigned long int catalanDP(unsigned int n) 
{ 
    // Table to store results of subproblems 
    unsigned long int catalan[n+1]; 
  
    // Initialize first two values in table 
    catalan[0] = catalan[1] = 1; 
  
    // Fill entries in catalan[] using recursive formula 
    for (int i=2; i<=n; i++) 
    { 
        catalan[i] = 0; 
        for (int j=0; j<i; j++) 
            catalan[i] += catalan[j] * catalan[i-j-1]; 
    } 
  
    // Return last entry 
    return catalan[n]; 
} 
  
// Returns count of ways to connect n points on a circle 
// such that no two connecting lines cross each other and 
// every point is connected with one other point. 
unsigned long int countWays(unsigned long int n) 
{ 
   // Throw error if n is odd 
   if (n & 1) 
   { 
      cout << "Invalid"; 
      return 0; 
   } 
  
   // Else return n/2'th Catalan number 
   return catalanDP(n/2); 
} 
  
// Driver program to test above function 
int main() 
{ 
    cout << countWays(6) << " "; 
    return 0; 
} 
